/**
 * Get a env var, either by passing a key val form the env.json or the actual name
 * @param options
 * @returns {*}
 */
export const envSetup = (options = {}) => {
  process.env.envjsonOptions = process.env.envjsonOptions || {}
  process.env.envJson = process.env.envJson || {}

  let path = options.path || process.env.envjsonOptions.path || 'env.json'
  let encoding = options.encoding || process.env.envjsonOptions.encoding || 'utf8'

  if (typeof process.env.envjsonOptions === 'undefined') {
    process.env.envjsonOptions = options
  }

  try {
    process.env.envJson = require('fs').readFileSync(path, encoding)
  } catch (e) {
    return console.error(e)
  }
  let envJson = JSON.parse(process.env.envJson)
  for (let key in envJson) {
    if (typeof envJson[key]['key'] !== 'undefined'
      && typeof envJson[key]['default'] !== 'undefined'
      && !process.env[envJson[key]['key']]
    ) {
      process.env[envJson[key]['key']] = envJson[key]['default']
    }
    else if (typeof envJson[key]['default'] === 'undefined' && typeof process.env[envJson[key]['key']] === 'undefined') {
      console.error('Environment variable by key "' + envJson[key]['key'] + '" has no default and no value set in the process.env.')
      console.error('Please either add a default to the env.json file or set the environment variable.')
      throw 'Environment variable by key "' + envJson[key]['key'] + '" has no default and no value set in the process.env.'
    }
  }
}
/**
 * Sets env variables if not already set to the default found in the env.json
 * @param getKey
 */
export const envGet = (getKey) => {
  let envJson = JSON.parse(process.env.envJson)
  if (typeof envJson[getKey] !== 'undefined') {
    try {
      return process.env[envJson[getKey]['key']]
    }
    catch (e) {
      console.error('Error fetch env variable: ' + getKey)
      throw e
    }
  }
  else {
    try {
      return process.env[getKey]
    }
    catch (e) {
      console.error('Error fetching unknown environment variable: ' + getKey)
      throw e
    }
  }
}
